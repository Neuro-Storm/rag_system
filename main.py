import gradio as gr
import os
import shutil
from pathlib import Path
from rag_utils import create_vector_index, load_vector_index, check_files_changed
from config import (
    DOCUMENTS_DIR, SUPPORTED_EXTENSIONS, 
    TOP_K_RESULTS, MAX_DISPLAY_TEXT_LENGTH,
    APP_TITLE, APP_DESCRIPTION,
    SIMILARITY_THRESHOLD
)
from extractors import get_file_extractor

def process_files(files):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
    try:
        Path(DOCUMENTS_DIR).mkdir(exist_ok=True)
        
        for file_path in files:
            file_name = os.path.basename(file_path)
            ext = os.path.splitext(file_name)[1].lower()
            
            if ext in SUPPORTED_EXTENSIONS:
                dest_path = os.path.join(DOCUMENTS_DIR, file_name)
                shutil.copy2(file_path, dest_path)
        
        if check_files_changed():
            create_vector_index()
            return f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤. –ò–Ω–¥–µ–∫—Å –æ–±–Ω–æ–≤–ª—ë–Ω."
        return f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤. –ò–Ω–¥–µ–∫—Å –∞–∫—Ç—É–∞–ª–µ–Ω."

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}"

def answer_query(query):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å"""
    if check_files_changed():
        create_vector_index()
    
    index = load_vector_index()
    if not index:
        return "–ò–Ω–¥–µ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã."
    
    query_engine = index.as_query_engine(
        similarity_top_k=TOP_K_RESULTS,
        llm=None,
        response_mode="no_text"
    )
    response = query_engine.query(query)
    
    if not response.source_nodes:
        return "‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    results = []
    for i, node in enumerate(response.source_nodes, 1):
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ—Ä–æ–≥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        if node.score < SIMILARITY_THRESHOLD:
            continue
            
        file_name = node.metadata.get("file_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª")
        text = node.text[:MAX_DISPLAY_TEXT_LENGTH] 
        if len(node.text) > MAX_DISPLAY_TEXT_LENGTH:
            text += "..."
        
        results.append(
            f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç #{i}\n"
            f"üìÑ –§–∞–π–ª: {file_name}\n"
            f"‚≠ê –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {node.score:.4f}\n"
            f"{'-'*50}\n"
            f"{text}\n\n"
        )
    
    if not results:
        return "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Ä–æ–≥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏"
    
    return "\n".join(results)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio
with gr.Blocks(title=APP_TITLE) as demo:
    gr.Markdown(f"# {APP_TITLE}")
    gr.Markdown(APP_DESCRIPTION)

    with gr.Tab("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"):
        file_input = gr.File(
            label=f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(SUPPORTED_EXTENSIONS)}",
            file_types=list(SUPPORTED_EXTENSIONS),
            file_count="multiple"
        )
        process_btn = gr.Button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        process_output = gr.Textbox(label="–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏", interactive=False)

    with gr.Tab("–ü–æ–∏—Å–∫"):
        query_input = gr.Textbox(label="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å", lines=2)
        query_output = gr.Textbox(
            label=f"–¢–æ–ø-{TOP_K_RESULTS} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            interactive=False,
            lines=10
        )
        search_btn = gr.Button("–ù–∞–π—Ç–∏")

    process_btn.click(process_files, inputs=[file_input], outputs=[process_output])
    search_btn.click(answer_query, inputs=[query_input], outputs=[query_output])

if __name__ == "__main__":
    demo.launch()